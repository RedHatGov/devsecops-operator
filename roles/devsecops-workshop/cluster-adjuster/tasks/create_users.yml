---
- name: Get Cluster Oauth
  k8s_info:
    api_version: v1
    kind: OAuth
    name: cluster
  register: cluster_oauth

- set_fact:
    htpasswd_provider: "{{ cluster_oauth.resources[0].spec | json_query(\"identityProviders[?type=='HTPasswd']\") | join }}"

- set_fact:
    htpasswd_secret_name: "{{ htpasswd_provider.htpasswd.fileData.name }}"
    htpasswd_provider_name: "{{ htpasswd_provider.name }}"
  when: htpasswd_provider is defined

- name: Get htpasswd secret
  k8s_info:
    kind: Secret
    name: '{{ htpasswd_secret_name }}'
    namespace: openshift-config
  register: htpasswd_secret
  when: htpasswd_secret_name is defined

- name: Copy HTPasswd file to tmp directory
  copy:
    content: "{{ htpasswd_secret.resources[0].data.htpasswd | b64decode }}"
    dest: '{{ tmp_dir + "/users.htpasswd" }}'
  when: htpasswd_secret_name is defined

- name: Create/update htpasswd file for users
  shell: |
    cd {{ tmp_dir }}
    [ -f users.htpasswd ] || touch users.htpasswd
    if htpasswd -v -b users.htpasswd '{{ user.username }}' '{{ user.password }}' &>/dev/null; then
        echo ok
    else
        htpasswd -B -b users.htpasswd '{{ user.username }}' '{{ user.password }}' &>/dev/null && echo changed || echo failed
    fi
  register: htpasswd
  changed_when: '"changed" in htpasswd.stdout_lines'
  failed_when: '"failed" in htpasswd.stdout_lines'
  loop: '{{ openshift_users }}'
  loop_control:
    loop_var: user
    label: '{{ user.username }}'

- name: Create/update the htpasswd secret
  k8s:
    state: present
    namespace: openshift-config
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        labels:
          type: htpasswd
        name: '{{ htpasswd_secret_name }}'
      type: Opaque
      stringData:
        htpasswd: '{{ lookup("file", tmp_dir + "/users.htpasswd") }}'

- name: Create/update OAuth CR
  k8s:
    state: present
    apply: yes
    definition:
      apiVersion: v1
      kind: OAuth
      metadata:
        name: cluster
        labels:
          type: htpasswd
      spec:
        identityProviders:
        - name: '{{ htpasswd_provider_name }}'
          mappingMethod: claim
          type: HTPasswd
          htpasswd:
            fileData:
              name: '{{ htpasswd_secret_name }}'

- name: Create User objects for each HTPasswd user
  k8s:
    state: present
    apply: yes
    definition: '{{ lookup("template", "users.yml.j2")|from_yaml }}'

- name: Enable admin on appropriate users
  k8s:
    state: present
    apply: yes
    definition: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: custom-admin-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      {% for user in openshift_users %}
      {% if user.admin is defined and user.admin %}
      - apiGroup: rbac.authorization.k8s.io
        kind: User
        name: {{ user.username }}
      {% endif %}
      {% endfor %}
