- name: Wait for Gitea to finish being created
  k8s_info:
    api_version: v1alpha1
    kind: Gitea
    namespace: '{{ gitea_project_name }}'
    name: gitea
  register: result
  until: result.resources[0].status | json_query("conditions[?(@.reason=='Successful')]")
  retries: 10
  delay: 30

- name: Get Gitea Admin Secret
  k8s_info:
    api_version: v1
    kind: Secret
    namespace: '{{ gitea_project_name }}'
    name: gitea-admin-credentials
  register: gitea_admin_credentials

- set_fact:
    gitea_admin_username: "{{ gitea_admin_credentials | json_query('resources[0].data.username') | b64decode }}"
    gitea_admin_password: "{{ gitea_admin_credentials | json_query('resources[0].data.password') | b64decode }}"

- name: Create Service Account for Gitea
  uri:
    url: 'https://gitea-{{ gitea_project_name }}.apps.{{ full_cluster_name }}/api/v1/admin/users'
    validate_certs: no
    body_format: json
    method: POST
    headers:
      Authorization: "Basic {{ (gitea_admin_username + ':' + gitea_admin_password) | b64encode }}"
    body:
      email: '{{ tssc_service_account.email }}'
      full_name: "{{ tssc_service_account.first_name + ' ' + tssc_service_account.last_name }}"
      login_name: '{{ tssc_service_account.username }}'
      must_change_password: false
      password: '{{ tssc_service_account.password }}'
      send_notify: false
      source_id: 0
      username: '{{ tssc_service_account.username }}'
    status_code: 201,422
  register: response
  changed_when: response.status == 201

- name: Check Service Account token is present
  uri:
    url: 'https://gitea-{{ gitea_project_name }}.apps.{{ full_cluster_name }}/api/v1/users/{{ tssc_service_account.username }}/tokens'
    validate_certs: no
    method: GET
    return_content: yes
    body_format: json
    headers:
      Authorization: "Basic {{ (tssc_service_account.username + ':' + tssc_service_account.password) | b64encode }}"
    status_code: 200
  register: gitea_access_token_response

- name: Create gitea access token if it doesn't exist
  block:
  - name: Create Application Token for Gitea
    uri:
      url: 'https://gitea-{{ gitea_project_name }}.apps.{{ full_cluster_name }}/api/v1/users/{{ tssc_service_account.username }}/tokens'
      validate_certs: no
      body_format: json
      method: POST
      headers:
        Authorization: "Basic {{ (tssc_service_account.username + ':' + tssc_service_account.password) | b64encode }}"
      body:
        name: tssc-platform-token
      status_code: 201,422
    register: token_creation_response
    changed_when: token_creation_response.status == 201

  - name: Grab token sha1 from response
    set_fact:
      gitea_access_token: '{{ token_creation_response.json.sha1 }}'

  - name: Create Gitea token secret
    k8s:
      definition: "{{ lookup('template', 'gitea-token-secret.yml.j2') }}"

  - name: Create Organization for Service Account
    uri:
      url: 'https://gitea-{{ gitea_project_name }}.apps.{{ full_cluster_name }}/api/v1/orgs'
      validate_certs: no
      body_format: json
      method: POST
      headers:
        Authorization: "token {{ gitea_access_token }}"
        Content-Type: "application/json"
      body:
        description: "TSSC Platform Organization"
        full_name: "platform"
        location: "Red Hat"
        repo_admin_change_team_access: true
        username: "platform"
        visibility: "public"
      status_code: 201,422
    register: response
    changed_when: response.status == 201
  when: gitea_access_token_response.json == []

- name: Get Gitea Pod
  k8s_info:
    api_version: v1
    kind: Pod
    namespace: '{{ gitea_project_name }}'
    label_selectors:
    - app=gitea
  register: gitea_pod

- name: Configure Gitea and RHSSO to work together
  include: gitea_rhsso.yml
