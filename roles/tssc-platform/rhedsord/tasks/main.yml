---
- include_role:
    name: common/redhatgov-catalog

- name: Get a list of operator groups
  k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    namespace: '{{ tssc_namespace }}'
  register: operator_groups

- set_fact:
    operator_group_name: '{{ operator_groups.resources[0].metadata.name }}'
  when: operator_groups.resources

- name: Ensure OperatorGroup exists
  k8s:
    definition: '{{ lookup("template", "operator-group.yml.j2") }}'

- name: 'Create Subscription for {{ item }}'
  k8s:
    definition: '{{ lookup("template", "subscriptions/" + item + ".yml.j2") }}'
  loop: '{{ operator_list }}'

- include_role:
    name: tssc-platform/rhsso
  when: deploy_rhsso

- name: 'Set CustomResource for {{ item }} to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "custom-resources/" + item + ".yml.j2") }}'
    state: '{{ cr_state }}'
  register: deployment
  until: not deployment.failed
  retries: 5
  delay: 10
  loop: '{{ operator_list }}'

- name: App level configuration
  block:
  - include_role:
      name: tssc-platform/gitea
    when: deploy_gitea
  - include_role:
      name: tssc-platform/argocd
    when: deploy_argocd
  - include_role:
      name: tssc-platform/sonarqube
    when: deploy_sonarqube
  - include_role:
      name: tssc-platform/nexus
    when: deploy_nexus
  - include_role:
      name: tssc-platform/quay
    when: deploy_quay
  - include_role:
      name: tssc-platform/legacy-jenkins
    when: deploy_legacy_jenkins
  - include_role:
      name: tssc-platform/mattermost
    when: deploy_mattermost_operator
  - include_role:
      name: common/codeready-workspaces
    when: deploy_crw
  - include_role:
      name: tssc-platform/selenium-grid
    when: deploy_selenium_grid
  when: cr_state == 'present'

- name: 'Set tssc-config ConfigMap to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "tssc-config.yml.j2") }}'
    state: '{{ cr_state }}'

- name: Get secret template as base64
  set_fact:
    tssc_config_secrets: "{{ lookup('template', 'tssc-config-secrets.yml.j2') | b64encode }}"

- name: 'Set tssc-config-secrets Secret to {{ cr_state }}'
  k8s:
    state: '{{ cr_state }}'
    definition: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: tssc-config-secrets
        namespace: '{{ tssc_namespace }}'
      data:
        tssc-config-secrets.yml: '{{ tssc_config_secrets }}'
