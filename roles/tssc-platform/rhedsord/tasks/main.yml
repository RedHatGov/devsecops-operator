---
- name: Fetch tssc-service-account secret
  set_fact:
    secret_data: "{{ lookup('k8s', kind='Secret', namespace=tssc_namespace, resource_name=tssc_service_account_secret) }}"

- name: Set tssc-service-account credential facts from secret
  set_fact:
    tssc_service_account:
      username:  "{{ secret_data.data.username | b64decode }}"
      password: "{{ secret_data.data.password | b64decode }}"
      email: "{{ secret_data.data.email | b64decode }}"
      first_name: "{{ secret_data.data.first_name | b64decode }}"
      last_name: "{{ secret_data.data.last_name | b64decode }}"
  when:
    - secret_data != []

- name: Create secret if missing
  block:
    - name: generate tssc-service-account credential facts
      set_fact:
        tssc_service_account:
          username:  tssc
          password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"
          email: tssc-service-account@redhat.com
          first_name: Tssc
          last_name: ServiceAccount
    - name: create secret
      k8s:
        namespace: '{{ tssc_namespace }}'
        definition: "{{ lookup('template', 'tssc-service-account-secret.yml.j2') }}"
  when:
    - secret_data == []

- name: Generate GPG Key
  import_tasks: generate_gpg_key.yml
  when: cr_state == 'present'

- include_role:
    name: common/redhatgov-catalog

- name: Get a list of operator groups
  k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    namespace: '{{ tssc_namespace }}'
  register: operator_groups

- set_fact:
    operator_group_name: '{{ operator_groups.resources[0].metadata.name }}'
  when: operator_groups.resources

- name: Ensure OperatorGroup exists
  k8s:
    definition: '{{ lookup("template", "operator-group.yml.j2") }}'

- name: 'Create Subscription for {{ item }}'
  k8s:
    definition: '{{ lookup("template", "subscriptions/" + item + ".yml.j2") }}'
  loop: '{{ operator_list }}'

- include_role:
    name: tssc-platform/rhsso
  when: deploy_rhsso

- name: 'Set CustomResource for {{ item }} to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "custom-resources/" + item + ".yml.j2") }}'
    state: '{{ cr_state }}'
  register: deployment
  until: not deployment.failed
  retries: 5
  delay: 10
  loop: '{{ operator_list }}'

- name: App level configuration
  block:
  - include_role:
      name: tssc-platform/gitea
    when: deploy_gitea
  - include_role:
      name: tssc-platform/argocd
    when: deploy_argocd
  - include_role:
      name: tssc-platform/sonarqube
    when: deploy_sonarqube
  - include_role:
      name: tssc-platform/nexus
    when: deploy_nexus
  - include_role:
      name: tssc-platform/quay
    when: deploy_quay
  - include_role:
      name: tssc-platform/legacy-jenkins
    when: deploy_legacy_jenkins
  - include_role:
      name: tssc-platform/mattermost
    when: deploy_mattermost_operator
  - include_role:
      name: common/codeready-workspaces
    when: deploy_crw
  - include_role:
      name: tssc-platform/selenium-grid
    when: deploy_selenium_grid
  when: cr_state == 'present'

- name: Get registry pull secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ tssc_platform.pull_secret.name | default('pull-secret') }}"
    namespace: "{{ tssc_platform.pull_secret.namespace | default('openshift-config') }}"
  register: pull_secret

- set_fact:
    reg_rhio_pull_token: "{{ pull_secret.resources[0].data['.dockerconfigjson'] | b64decode | from_json }}"

- set_fact:
    rhio_auth: "{{ reg_rhio_pull_token.auths['registry.redhat.io'].auth | b64decode }}"

- set_fact:
    rhio_username: "{{ rhio_auth.split(':')[0] }}"
    rhio_token: "{{ rhio_auth.split(':')[1] }}"

- name: 'Set tssc-config ConfigMap to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "tssc-config.yml.j2") }}'
    state: '{{ cr_state }}'

- name: Get secret template as base64
  set_fact:
    tssc_config_secrets: "{{ lookup('template', 'tssc-config-secrets.yml.j2') | b64encode }}"

- name: 'Set tssc-config-secrets Secret to {{ cr_state }}'
  k8s:
    state: '{{ cr_state }}'
    definition: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: tssc-config-secrets
        namespace: '{{ tssc_namespace }}'
      data:
        tssc-config-secrets.yml: '{{ tssc_config_secrets }}'
