---
# https://docs.openshift.com/container-platform/4.5/openshift_images/using_images/images-other-jenkins.html#images-other-jenkins-env-var_images-other-jenkins
# looks like the env var OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS would mean that we don't have to worry as long as the default plugins are sufficient

- name: Ensure Jenkins controller ImageStream exists in disconnected cluster
  when: not connected_cluster
  block:

  - name: List Jenkins repository image tags
    uri:
      url: 'https://{{ rhedsord_registry }}/v2/{{ jenkins_repository_name }}/tags/list'
      method: GET
      user: '{{ rhedsord_registry_username }}'
      password: '{{ rhedsord_registry_password }}'
      force_basic_auth: yes
      status_code: 200
      validate_certs: false
    register: openshift_release_dev_image_tags

  - set_fact:
      jenkins_image_path: '{{ rhedsord_registry }}/{{ jenkins_repository_name }}:{{ item }}'
    loop: '{{ openshift_release_dev_image_tags.json.tags }}'
    when: item is match('.*jenkins$')

  - name: Create Jenkins ImageStream
    k8s:
      namespace: openshift
      definition: '{{ lookup("template", "imagestream.yml.j2")|from_yaml }}'

- name: Create a Jenkins instance
  k8s:
    namespace: '{{ jenkins_project_name }}'
    definition: '{{ lookup("template", "jenkins.yml.j2")|from_yaml }}'

- name: Delete RoleBinding for user accounts if they exist
  k8s:
    namespace: '{{ jenkins_project_name }}'
    definition: '{{ lookup("template", "jenkins_user_role_binding.yml.j2")|from_yaml }}'
    state: absent

- name: Add RoleBinding for user accounts
  k8s:
    namespace: '{{ jenkins_project_name }}'
    definition: '{{ lookup("template", "jenkins_user_role_binding.yml.j2")|from_yaml }}'

- name: Create run-as-user-1001 SCC for jenkins
  k8s:
    definition: "{{ lookup('template', 'rbac.yml.j2') | from_yaml }}"

- name: Wait for Jenkins to respond to requests
  uri:
    url: 'https://jenkins-{{ tssc_namespace }}.apps.{{ full_cluster_name }}/login'
    validate_certs: no
  register: jenkins_endpoint
  until: jenkins_endpoint.status == 200
  retries: 30
  delay: 20

- name: Get Service Account token
  set_fact:
    ocp_token: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"

- name: Ensure Gitea Server is configured in jenkins settings
  uri:
    url: 'https://jenkins-{{ tssc_namespace }}.apps.{{ full_cluster_name }}/script'
    method: POST
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ ocp_token }}'
    body:
      script: 'giteaServers = Jenkins.instance.getExtensionList(org.jenkinsci.plugin.gitea.servers.GiteaServers.class)[0];giteaServers.updateServer(new org.jenkinsci.plugin.gitea.servers.GiteaServer("platform", "http://gitea.{{ tssc_namespace }}.svc.cluster.local:3000", true, null, "https://gitea-{{ tssc_namespace }}.apps.{{ full_cluster_name }}/"));giteaServers.save();["BranchSpec getName", "GitSCM getBranches", "GitSCM getUserRemoteConfigs", "UserRemoteConfig getUrl"].each{ method -> org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.get().approveSignature("method hudson.plugins.git.${method}")}'
  register: org_response

- name: Get gitea token secret
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: '{{ tssc_namespace }}'
    name: gitea-access-token
  register: gitea_token_secret

- set_fact:
    gitea_token: "{{ gitea_token_secret.resources[0].data.token | b64decode }}"

- name: Create Gitea Credential
  uri:
    url: "https://jenkins-{{ tssc_namespace }}.apps.{{ full_cluster_name }}/credentials/store/system/domain/_/createCredentials"
    method: POST
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ ocp_token }}'
      Content-Type: 'text/xml'
    body: "{{ lookup('template', 'gitea-token-credential.xml.j2') }}"
    status_code: 200,409
  register: credential_response
  changed_when: credential_response.status == 200

- name: Create platform Gitea Organization
  uri:
    url: 'https://jenkins-{{ tssc_namespace }}.apps.{{ full_cluster_name }}/createItem?name=platform'
    method: POST
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ ocp_token }}'
      Content-Type: 'text/xml'
    body: "{{ lookup('template', 'gitea-organization.xml.j2') }}"
    status_code: 200,400
  register: org_response
  changed_when: org_response.status == 200
